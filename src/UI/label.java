/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import CONTROLLER.TerminatingException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

/**
 *
 * @author Qwerty
 */
public class label extends javax.swing.JPanel {

    /**
     * Creates new form label
     */
    final private int maxc = 30;
    private int begin;
    private String str;
    TerminatingException ex;

    public label(String type, TerminatingException ex) {
        initComponents();
        begin = 0;
        tip.setText(type);
        str = ex.toString();
        this.ex = ex;
    }

    public TerminatingException getEx() {
        return ex;
    }

    public label(String type) {
        initComponents();
        begin = 0;
        tip.setText(type);
    }

    public void ActualizeSTR(String str) {
        begin = 0;
        if (str.length() <= maxc) {
            prev.setVisible(false);
            ahead.setVisible(false);
        } else {
            prev.setVisible(true);
            ahead.setVisible(true);
        }
        this.str = str;
        jLabel1.setText(this.str.substring(begin, (begin + maxc > this.str.length()) ? this.str.length() : begin + maxc));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        tip = new javax.swing.JLabel();
        prev = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        ahead = new javax.swing.JButton();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setOpaque(false);

        jToolBar1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        tip.setText("jLabel2");
        jToolBar1.add(tip);

        prev.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMGS/prev.png"))); // NOI18N
        prev.setFocusable(false);
        prev.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        prev.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        prev.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                prevMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                prevMouseReleased(evt);
            }
        });
        prev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevActionPerformed(evt);
            }
        });
        jToolBar1.add(prev);

        jLabel1.setFont(new java.awt.Font("Monospaced", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(89, 129, 189));
        jLabel1.setText("------------------------------");
        jToolBar1.add(jLabel1);

        ahead.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMGS/ahead.png"))); // NOI18N
        ahead.setFocusable(false);
        ahead.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        ahead.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        ahead.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                aheadMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                aheadMouseReleased(evt);
            }
        });
        ahead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aheadActionPerformed(evt);
            }
        });
        jToolBar1.add(ahead);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void aheadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aheadActionPerformed
        if (str.length() - maxc > begin) {
            begin++;
            jLabel1.setText(str.substring(begin, (begin + maxc > str.length()) ? str.length() : begin + maxc));
        }
    }//GEN-LAST:event_aheadActionPerformed

    private void prevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevActionPerformed
        if (begin > 0) {
            begin--;
            jLabel1.setText(str.substring(begin, (begin + maxc > str.length()) ? str.length() : begin + maxc));
        }
    }//GEN-LAST:event_prevActionPerformed

    private void aheadMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aheadMousePressed
        adelante = true;
        activador.start();
    }//GEN-LAST:event_aheadMousePressed

    private void prevMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevMousePressed
        adelante = false;
        activador.start();
    }//GEN-LAST:event_prevMousePressed

    private void aheadMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aheadMouseReleased
        activador.stop();
        if (runner != null) {
            runner.stop();
        }
    }//GEN-LAST:event_aheadMouseReleased

    private void prevMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_prevMouseReleased
        activador.stop();
        if (runner != null) {
            runner.stop();
        }
    }//GEN-LAST:event_prevMouseReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ahead;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton prev;
    private javax.swing.JLabel tip;
    // End of variables declaration//GEN-END:variables

    boolean adelante;
    Timer activador = new Timer(1000, new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            if (adelante) {
                runner = new Timer(100, go_ahead);
                runner.start();
            } else {
                runner = new Timer(100, go_back);
                runner.start();
            }
            activador.stop();
        }
    });

    Timer runner;
    ActionListener go_ahead = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            aheadActionPerformed(null);
            repaint();
        }
    };
    ActionListener go_back = new ActionListener() {

        @Override
        public void actionPerformed(ActionEvent e) {
            prevActionPerformed(null);
            repaint();
        }
    };
}
